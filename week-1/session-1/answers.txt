1.Party

vi graph[200001],dp(200001);
int ans=1;
void dfs(int src,int par){
    for(auto &i:graph[src]){
        if(i!=par){
            dp[i]=dp[src]+1;
            ans=max(ans,dp[i]);
            dfs(i,src);
        }
    }
}

2.christamas spruce 

bool ok=1;
void dfs(int src,int par){
    int l=0;
    for(auto &i:graph[src]){
        if(graph[i].size()==1) l++;
        else if(i!=par) dfs(i,src);
    }
    if(l<3) ok=0;
}

3.Subordinates

int dfs(int src,int par){
    int ans=0;
    for(auto &i:graph[src]){
        if(i!=par){
            nodes[src]+=dfs(i,src);
        }
    }
    return nodes[src]+1;
}

4.useful decomposition 

https://codeforces.com/contest/981/submission/210202287
void dfs(int src,int par){
    for(auto &i:graph[src]){
        if(i!=par){
            if(graph[i].size()==1) nodes.push_back(i);
            else dfs(i,src);
        }
    }
}
int cnt=0,root=1;
for(auto i=1;i<=n;++i){
    if(graph[i].size()>2) cnt++, root=i;
}
if(cnt>1){
    cout<<"No";
    return;
}
dfs(root,root);
cout<<"Yes\n"<<nodes.size()<<endl;
for(auto i=0;i<nodes.size();++i) cout<<root<<" "<<nodes[i]<<endl;


5.kefa and park

int ans = 0, k;
void dfs(int src, int par) {
    for (auto &i : graph[src]) {
        if (i != par) {
            cons[i] = (cats[i]) ? cons[src] + 1 : 0;
            if (cons[i] <= k and graph[i].size() == 1) ans++;
            else if (cons[i] <= k) dfs(i, src);
        }
    }
}

6.tomfey and tree

vi graph[mod2],nodes(mod2);
int col,ok;
void dfs(int src,int par){
    ok = ok and (nodes[src]==col);
    for(auto &i:graph[src]){
        if(i!=par){
            dfs(i,src);
        }
    }
}
bool find(int src){
    bool ans=1;
    for(auto &i:graph[src]){
        ok=1;
        col=nodes[i];
        dfs(i,src);
        ans=ans and ok;
    }
    return ans;
}

int root1=-1,root2=-1;
for(auto i=1;i<=n;++i){
    for(auto &j:graph[i]){
        if(nodes[i]!=nodes[j]){
            root1=i;
            root2=j;
        }
    }
}
if(root1==-1){
    yes<<endl<<1;
}else if(find(root1)){
    yes<<endl<<root1;
}else if(find(root2)){
    yes<<endl<<root2;
}else no;

